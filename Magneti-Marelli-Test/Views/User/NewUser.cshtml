@model Magneti_Marelli_Test.Models.User


@using Magneti_Marelli_Test.Utility;

@{
    ViewBag.Title = "NewUser";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@using (Html.BeginForm("CreateUser", "user", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Mail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Mail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpirationDate, htmlAttributes: new { @class = "control-label col-md-2 " })
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-addon" id="basic-addon1">
                        <span class="fa fa-calendar"></span>
                    </span>
                    @Html.TextBoxFor(model => model.ExpirationDate, new { @class = "form-control expiration-date adjust-width", id = "expDate" })

                </div>
                @Html.ValidationMessageFor(model => model.ExpirationDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BL, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.BL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BL, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Site, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Site, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Site, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ManagerDisplayName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.ManagerDisplayName, new { htmlAttributes = new { @class = "form-control", @id = "ManagerLabelDisplayName", @readonly = "readonly" } })
                @Html.EditorFor(model => model.ManagerLoginName, new { htmlAttributes = new { @class = "form-control", @id = "ManagerId", style = "display:none" } })
            </div>
            <button id="modal" class="btn btn-default"> Add/Modify Manager</button>
            @Html.ValidationMessageFor(n => n.ManagerDisplayName)
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<div id="mymodal" class="modal fade hidden-print" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Add Manager</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">

                    <div class="input-group">
                        <span class="input-group-addon" id="basic-addon1">
                            <span class="fa fa-search"></span>
                        </span>
                        <input type="text" id="qry" class="form-control" placeholder="Username" aria-describedby="basic-addon1">

                        <button class="btn btn-primary" id="searchButton" style="margin-left:20px;">Search</button>
                    </div>



                    <div id="modal-content" style="margin-top:10px;">

                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal">OK</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">NO</button>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>


        $(document).ready(function () {

            var pageSize = 20;

            var optionListUrl = '@Url.Action("GetManagerList", "User")';

           //Method which is to be called for populating options in dropdown //dynamically



            var d = $('.expiration-date').datetimepicker({
                format: "DD/MM/YYYY"
            });

            //add for jquery validation in Chrome that accept only MM/DD/YYYY DateFormat
            jQuery.validator.methods["date"] = function (value, element) {

                var dateRegex = /^(0?[1-9]\/|[12]\d\/|3[01]\/){2}(19|20)\d\d$/;
                return this.optional(element) || dateRegex.test(value);

            }

            $("#modal").click(function () {

                $('#mymodal').modal('toggle');
                return false;
            })

           $('#searchButton').click(function () {

            //Get the id to delete from the hidden field
            var qry = $('#qry').val();

            $.ajax({
                url: "/User/QueryManager",
                type:"POST",
                data: {
                    searchTerm: qry
                },
                success: function (data) {
                    // your data could be a View or Json or what ever you returned in your action method
                    // parse your data here
                    $("#modal-content").html(data);

                    $('#gridUser').DataTable({
                        "pagingType": "full_numbers",
                        searching: false
                    });
                }
            });


        });

        });

        function AddOrModifyManager(ManagerLoginName, ManagerDisplayName) {

            $("#ManagerLabelDisplayName").text(ManagerDisplayName)
            $("#ManagerLabelDisplayName").val(ManagerDisplayName)
            $("#ManagerId").val(ManagerLoginName);
            $("#ManagerId").text(ManagerLoginName);
            $('#mymodal').modal('toggle');
        }
    </script>
}
